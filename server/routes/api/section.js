const express = require('express');
const router = express.Router();
var {
    Section,
    SeatingLayout,
    User
} = require('../../dbSchemas/attendanceSchema');

router.get('/', (req, res) => {


});

// --------------- Seating Layout Methods --------------------

// gets information regarding a seating layout given a professor id
router.get('/previousSeatingPlans', (req, res) => {
    // Return all seating plans stored in the database
    // (we do not filter by professor id)
    SeatingLayout.find({}, function (err, seatingLayout) {
        if (err) {
            console.log(err);
            return res.status(500).send();
        }

        return res.status(200).json({
            seatingLayout
        });
    })


});

// creates a seating layout
router.post('/createSeatingLayout', (req, res) => {
    let name = req.body.name;
    let capacity = req.body.capacity;
    let dimension = req.body.dimensions;
    let layout = req.body.layout;
    let def = req.body.default;
    let description = req.body.description;
    let createdBy = req.body.createdBy;

    const seatingLayout = new SeatingLayout();
    seatingLayout.name = name;
    seatingLayout.capacity = capacity;
    seatingLayout.dimensions = dimension;
    seatingLayout.default = def;
    seatingLayout.layout = layout;
    seatingLayout.description = description;
    seatingLayout.created_by = createdBy;

    seatingLayout.save(err => {
        if (err) {
            console.log(err);
            return res.status(500).send(err);
        }
        // Return the saved seatingLayout
        // (it includes the _id generated by MongoDB which the frontend needs)
        return res.status(200).json({
            seatingLayout
        });
    })
});

// --------------- Section Methods --------------------

// creates a student section
router.post('/createSection', (req, res) => {
    let sectionName = req.body.sectionName;
    let attendanceThreshold = req.body.attendanceThreshold;
    let seatingLayout = req.body.seatingLayout;
    let attMandatory = req.body.attMandatory;
    let professor = req.body.professor;
    let admin = req.body.admin;
    let maxCapacity = req.body.maxCapacity;
    let seatingArrangement = req.body.seatingArrangement;
    let classList = req.body.classList;
    let students = [];
    let attendance = [];

    const newSection = new Section();
    newSection.name = sectionName;
    newSection.admin = admin;
    newSection.professor = professor;
    newSection.registered_students = students;
    newSection.class_list = classList;
    newSection.max_capacity = maxCapacity;
    newSection.seating_layout = seatingLayout;
    newSection.attendance = attendance;
    newSection.always_mandatory = attMandatory;
    newSection.attendance_threshold = attendanceThreshold;
    newSection.seating_arrangement = seatingArrangement;

    newSection.save(err => {
        if (err) {
            console.log(err);
            return res.status(500).send(err);
        }

        return res.status(200).json({
            newSection
        });
    })

});

// updates a student section
router.put('/updateSection', (req, res) => {

    let sectionId = req.body.sectionId;
    let sectionName = req.body.sectionName;
    let attendanceThreshold = req.body.attendanceThreshold;
    let seatingLayout = req.body.seatingLayout;
    let attMandatory = req.body.attMandatory;
    let professor = req.body.professor;
    let admin = req.body.admin;
    let students = req.body.students;
    let classList = req.body.classList;
    let maxCapacity = req.body.maxCapacity;
    let seatingArrangement = req.body.seatingArrangement;

    Section.findOne({
        _id: sectionId
    }, function (err, section) {
        console.log(sectionName);
        console.log(section)

        if (err || section == null) {
            console.log(err);
            return res.status(500).send(err);
        }

        if (sectionName != null && sectionName !== "") {
            section.name = sectionName;
        }
        if (attendanceThreshold != null && attendanceThreshold !== "") {
            section.attendance_threshold = attendanceThreshold;
        }
        if (seatingLayout != null && seatingLayout !== "") {
            section.seating_layout = seatingLayout;
        }
        if (attMandatory != null && attMandatory !== "") {
            section.always_mandatory = attMandatory;
        }
        if (professor != null && professor !== "") {
            section.professor = professor;
        }
        if (admin != null && admin !== "") {
            section.admin = admin;
        }
        if (students != null && students !== "") {
            section.registered_students = students
        }
        if (maxCapacity != null && maxCapacity !== "") {
            section.max_capacity = maxCapacity;
        }
        if (seatingArrangement != null && seatingArrangement !== "") {
            section.seating_arrangement = seatingArrangement;
        }
        if (Array.isArray(classList) && classList.length) {
            section.class_list = classList;
        }

        section.save(err => {
            if (err) {
                console.log(err);
                return res.status(500).send(err);
            }

            return res.status(200).send();
        })
    });
});


// Delete a seating layout given its id if it is not used by a section.
// Returns status 200 on success, 500 on error, 418 if it is used by a section.
router.post('/deleteSeatingLayout', (req, res) => {
    var id = req.body.id;

    SeatingLayout.findById(id, (err, layout) => {
        if(err || layout == null){
            console.log(err);
            return res.status(500).send();
        }

        Section.findOne({seating_layout:id}, (err, section) => {
            if(err){
                console.log(err);
                return res.status(500).send();
            }

            if(section == null){
                // Layout is not used: delete it!
                SeatingLayout.findByIdAndDelete(id, (err) => {
                    if(err){
                        console.log(err);
                        return res.status(500).send();
                    }
            
                    return res.status(200).send(); 
                });
            }
            else{
                // Layout is used by a section
                return res.status(418).send();
            }     
        });
    });



});

router.delete('/deleteSection', (req, res) => {
    // Delete all sections with the given name 
    // (should only delete one since emails are unique)
    var name = req.body.name;

    Section.deleteMany({ name: name }, (err) => {
        if(err){
            console.log(err);
            return res.status(500).send();
        }

        return res.status(200).send();
    });
});


/**drops a section by a given student, such that it removes him from the registered_students list
 * of a given section
 * ==========================================
 * Example api call body:
 * {
    "studentID": "5f984a44da9eb32ba01d31dd",
    "sectionID" : "5f984a44da9eb32ba01d31df"
    }
 */
router.post('/dropSection', (req, res) => {
    let studentID = req.body.studentID;
    let sectionID = req.body.sectionID;

    Section.findById(sectionID, function (err, section) {
        if (err || section == null) {
            console.log(err);
            return res.status(500).send(err);
        }

        // Find the student in the list of registered students
        let index = section.registered_students.indexOf(studentID);
        if (index == -1) {
            // Error if student is not enrolled
            return res.status(520).send(err);
        }
        // Remove the student from the list of registered students
        section.registered_students.splice(index, 1);

        // Copy the seating arrangement
        var newSeatingArrangement = JSON.parse(JSON.stringify(section.seating_arrangement));
        // Remove the student from the seating arrangement
        newSeatingArrangement.forEach((row, rowIndex) => {
            row.forEach((column, columnIndex) => {
                // Replace seat with null if found
                const seat = newSeatingArrangement[rowIndex][columnIndex];
                if (seat == studentID) {
                    newSeatingArrangement[rowIndex][columnIndex] = null;
                }
            });
        });
        // Replace the seating arrangement
        section.seating_arrangement = newSeatingArrangement;

        section.save(err => {
            if (err) {
                console.log(err);
                return res.status(500).send(err);
            }
            return res.status(200).send();
        })
    })
});


// ------------- Combined Seating Layout and Section Methods -------------

// gets information regarding a section given a section id
router.get('/getSectionView', (req, res) => {

    // Note: for get requests data is sent through query params
    let sectionID = req.query.sectionID;
    
    Section.findById(sectionID)
    // The populate method replaces an objectId reference with the actual object
    // Documentation: https://mongoosejs.com/docs/populate.html
    .populate('professor', 'name')
    .populate('seating_layout')
    .exec()
    .then(section => {
        if(section == null){
            console.log("section was null/not found");
            return res.status(500).send();
        }

        // Here we want to populate the seating arrangement
        // (we need to do it 'manually' since it is a 2d array)
        // Inspired by: https://stackoverflow.com/questions/55878496/mongoose-populate-on-two-dimensional-array

        // Generate all the seating arrangement position of the 2d array
        let seating_positions = [];
        for(let i=0; i<=section.seating_arrangement.length; i++) {
            for(let j=0; j<=section.seating_arrangement[0].length; j++) {
                seating_positions.push(`seating_arrangement.${i}.${j}`);
            }
        }
        // Populate all the positions of the seating_arrangement
        section.populate(seating_positions.join(' '), (err, fullSection) => {
            if(err) {
                console.log(err)
                return res.status(500).send(err)
            }
            return res.status(200).json(fullSection) 
        });
    })
    .catch(err => {
        console.log(err)
        return res.status(500).send(err)
    })
})


module.exports = router;
