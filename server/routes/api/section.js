const express = require('express');
const router = express.Router();
var { Course, SeatingLayout } = require('../../dbSchemas/attendanceSchema');

router.get('/', (req, res) => {


});

// --------------- Seating Layout Methods --------------------

// gets information regarding a seating layout given a professor id
router.get('/previousSeatingPlans', (req, res) => {
    // this is the professor ID
    let professor = req.body.professor;

    SeatingLayout.find({$or : [{default: true} , {created_by : professor}]}, function(err, seatingLayout){
        if(err){
            console.log(err);
            return res.status(500).send();
        }

        return res.status(200).json({
            seatingLayout
        });
    })


});

// creates a seating layout
router.post('/createSeatingLayout', (req,res) => {
    let name  = req.body.name;
    let capacity  = req.body.capacity;
    let dimension  = req.body.dimensions;
    let layout  = req.body.layout;
    let def = req.body.default;
    let description  = req.body.description;
    let createdBy = req.body.createdBy;

    const seatingLayout = new SeatingLayout();
    seatingLayout.name = name;
    seatingLayout.capacity = capacity;
    seatingLayout.dimensions = dimension;
    seatingLayout.default = def;
    seatingLayout.layout = layout;
    seatingLayout.description = description;
    seatingLayout.created_by = createdBy;

    seatingLayout.save(err => {
        if(err){
            console.log(err);
            return res.status(500).send(err);
        }
        // Return the saved seatingLayout
        // (it includes the _id generated by MongoDB which the frontend needs)
        return res.status(200).json({
            seatingLayout
        }); 
    })
});

// --------------- Section/Course Methods --------------------

// creates a student section
router.post('/createSection', (req, res) => {
    let courseName = req.body.courseName;
    let attendanceThreshold = req.body.attendanceThreshold;
    let seatingLayout = req.body.seatingLayout;
    let attMandatory = req.body.attMandatory;
    let professor = req.body.professor;
    let admin = req.body.admin;
    let students = req.body.students;
    let maxCapacity = req.body.maxCapacity;
    let seatingArrangement = req.body.seatingArrangement;
    let classList = req.body.classList;
    let attendance = [];

    const newSection = new Course();
    newSection.name = courseName;
    newSection.admin = admin;
    newSection.professor = professor;
    newSection.registered_students = students;
    newSection.class_list = classList;
    newSection.max_capacity = maxCapacity;
    newSection.seating_layout = seatingLayout;
    newSection.attendance  = attendance;
    newSection.always_mandatory = attMandatory;
    newSection.attendance_threshold = attendanceThreshold;
    newSection.seating_arrangement = seatingArrangement;

    newSection.save(err => {
    if(err){
        console.log(err);
        return res.status(500).send(err);
    }

    return res.status(200).send(); 
    })

});

// updates a student section
router.post('/updateSection', (req, res) => {

    let courseId = req.body.courseId;
    let courseName = req.body.courseName;
    let attendanceThreshold = req.body.attendanceThreshold;
    let seatingLayout = req.body.seatingLayout;
    let attMandatory = req.body.attMandatory;
    let professor = req.body.professor;
    let admin = req.body.admin;
    let students = req.body.students;
    let classList = req.body.classList;
    let maxCapacity = req.body.maxCapacity;
    let seatingArrangement = req.body.seatingArrangement;
    let attendance = [];

    Course.findOne({_id: courseId}, function (err, course) {
        console.log(courseName);
        console.log(course)

        if(err || course == null){
            console.log(err);
            return res.status(500).send(err);
        }

        if(courseName != null && courseName !== ""){
            course.name = courseName;
        }
        if(attendanceThreshold != null && attendanceThreshold !== ""){
            course.attendance_threshold = attendanceThreshold;
        }
        if(seatingLayout != null && seatingLayout !== ""){
            course.seating_layout = seatingLayout;
        }
        if(attMandatory != null && attMandatory !== ""){
            course.always_mandatory = attMandatory;
        } 
        if(professor != null && professor !== ""){
            course.professor = professor;
        }
        if(admin != null && admin !== ""){
            course.admin = admin;
        }
        if(students != null && students !== ""){
            course.registered_students = students
        }
        if(maxCapacity != null && maxCapacity !== ""){
            course.max_capacity = maxCapacity;
        }
        if(seatingArrangement != null && seatingArrangement !== ""){
            course.seating_arrangement = seatingArrangement;
        }
        if(Array.isArray(attendance) && attendance.length){
            course.attendance = attendance;
        }
        if(Array.isArray(classList) && classList.length){
            course.class_list = classList;
        }
    
        course.save(err => {
            if(err){
                console.log(err);
                return res.status(500).send(err);
            }
        
            return res.status(200).send(); 
        })
    });
});

module.exports = router;

// ------------- Combined Seating Layout and Course Methods -------------

// gets information regarding a course given a course id
router.get('/getCourseView', (req, res) => {
    let courseID = req.body.courseID;

    Course.findOne( {_id: courseID} , function(err, course){
        if(err){
            console.log(err);
            return res.status(500).send();
        }

        SeatingLayout.findOne({_id: course.seating_layout}, function(err, seatingLayout){

            let myLayout;
            if(err){
                console.log(err);
                return res.status(500).send();
            }
    
            if(seatingLayout != null && seatingLayout.layout != null) {
                myLayout = seatingLayout.layout;
            } else {
                myLayout = [];
            }

            return res.status(200).json({
                "name" : course.name,
                "alwaysMandatory" : course.always_mandatory,
                "students": course.students,
                "seatingLayout" : myLayout
            });
        })

    })


});
