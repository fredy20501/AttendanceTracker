const { User, Section, SeatingLayout } = require('dbSchemas/attendanceSchema.js');

// Generates a string guaranteed to be unique when compared
// to other strings generated by this function.
// Source: https://gist.github.com/gordonbrander/2230317
function uniqueID() {
    // Math.random should be unique because of its seeding algorithm.
    // Convert it to base 36 (numbers + letters), and grab the first 9 characters
    // after the decimal.
    return '_' + Math.random().toString(36).substr(2, 9);
}

async function login(request, user) {
    return await request.post("/api/login").send({
        email: user.email, 
        password: user.password
    });
}
async function logout(request) {
    return await request.get("/api/logout");
}

async function createUser(isProfessor) {
    const unique = uniqueID();
    const userName = "test_user_"+unique;
    var newUser = await User.create({
        email: userName+"@unb.ca",
        name: userName,
        password: unique,
        is_professor: isProfessor
    });
    // Add string version of the id for convenience
    newUser.id = newUser._id.toString();
    return newUser;
}
async function deleteUser(userID) {
    return await User.findByIdAndDelete(userID).exec();
}

async function createSeatingLayout() {
    const unique = uniqueID();
    var newLayout = await SeatingLayout.create({
        name: 'test_layout_'+unique,
        capacity: 1,
        dimensions: [1,1],
        layout: [[0]],
        default: false
    });
    // Add string version of the id for convenience
    newLayout.id = newLayout._id.toString();
    return newLayout;
}
async function deleteSeatingLayout(layoutID) {
    return await SeatingLayout.findByIdAndDelete(layoutID).exec();
}

async function createSection(professor, layout, students) {
    const unique = uniqueID();
    if (!professor) professor = await createUser(true);
    if (!layout) layout = await createSeatingLayout();
    if (!students) students = [];
    var newSection = await Section.create({
        name: 'test_section_'+unique,
        professor: professor._id,
        max_capacity: 1,
        registered_students: students,
        class_list: [],
        attendance_threshold: 1,
        attendance: [],
        seating_layout: layout._id,
        seating_arrangement: [[null]],
        always_mandatory: false
    });
    // Add string version of the id for convenience
    newSection.id = newSection._id.toString();
    return newSection;
}
async function deleteSection(sectionID) {
    return await Section.findByIdAndDelete(sectionID).exec();
}
async function getSection(sectionID) {
    return await Section.findById(sectionID).exec();
}

// Creates default data that can be re-used between non-destructive tests
// (non-destructive means that you don't modify this data so other tests can use it as well)
// (if you are modifying it create your own data)
async function createTestData() {
    const professor = await createUser(true);
    const student = await createUser(false);
    const layout = await createSeatingLayout();
    const section = await createSection(professor, layout);
    return {
        professor,
        student,
        layout,
        section
    }
}

// Helper function to delete data created by createTestData()
async function deleteTestData(testData) {
    await deleteSection(testData.section._id);
    await deleteSeatingLayout(testData.layout._id);
    await deleteUser(testData.professor._id);
    await deleteUser(testData.student._id);
}

// Helper function that deletes all test data from database
// (do NOT use in automated tests)
// async function clearAllTestData() {
//     await User.deleteMany({name: /^test_/}).exec();
//     await Section.deleteMany({name: /^test_/}).exec();
//     await SeatingLayout.deleteMany({name: /^test_/}).exec();
// }



module.exports = {
    uniqueID,
    login,
    logout,
    createUser,
    deleteUser,
    createSection,
    deleteSection,
    getSection,
    createSeatingLayout,
    deleteSeatingLayout,
    createTestData,
    deleteTestData
};