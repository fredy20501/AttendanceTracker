const { User, Section, ArchivedSection, SeatingLayout } = require('dbSchemas/attendanceSchema.js');

// Generates a string guaranteed to be unique when compared
// to other strings generated by this function.
// Source: https://gist.github.com/gordonbrander/2230317
function uniqueID() {
    // Math.random should be unique because of its seeding algorithm.
    // Convert it to base 36 (numbers + letters), and grab the first 9 characters
    // after the decimal.
    return '_' + Math.random().toString(36).substr(2, 9);
}

async function login(request, user) {
    return await request.post("/api/login").send({
        email: user.email, 
        password: user.password
    });
}
async function logout(request) {
    return await request.get("/api/logout");
}

// Helper function to add the string version of the id to the object
function addStringID(mongooseObject) {
    mongooseObject.id = mongooseObject._id.toString();
    return mongooseObject;
}

async function createUser(isProfessor) {
    const unique = uniqueID();
    const userName = "*test_user"+unique;
    var newUser = await User.create({
        email: userName+"@unb.ca",
        name: userName,
        password: unique,
        is_professor: isProfessor
    });
    return addStringID(newUser);
}
async function deleteUser(userID) {
    return await User.findByIdAndDelete(userID).exec();
}

async function createSeatingLayout(layout) {
    // Set default values if not given
    const L = layout ?? new Object();
    if (!L.layout) L.layout = [[2]];
    if (!L.dimensions) L.dimensions = [L.layout.length, L.layout[0].length];
    if (!L.capacity) L.capacity = L.dimensions[0] * L.dimensions[1];
    if (!L.default) L.default = false;
    var newLayout = await SeatingLayout.create({
        name: '*test_layout'+uniqueID(),
        capacity: L.capacity,
        dimensions: L.dimensions,
        layout: L.layout,
        default: L.default
    });
    return addStringID(newLayout);
}
async function deleteSeatingLayout(layoutID) {
    return await SeatingLayout.findByIdAndDelete(layoutID).exec();
}

async function createSection(section) {
    // Set default values if not given
    const s = section ?? new Object();
    if (!s.professor) s.professor = await createUser(true);
    if (!s.max_capacity) s.max_capacity = 1;
    if (!s.registered_students) s.registered_students = [];
    if (!s.class_list) s.class_list = [];
    if (!s.attendance_threshold) s.attendance_threshold = 1;
    if (!s.attendance) s.attendance = [];
    if (!s.seating_layout) s.seating_layout = await createSeatingLayout();
    if (!s.seating_arrangement) s.seating_arrangement = [[null]];
    if (!s.always_mandatory) s.always_mandatory = false;
    var newSection = await Section.create({
        name: '*test_section'+uniqueID(),
        professor: s.professor._id,
        max_capacity: s.max_capacity,
        registered_students: s.registered_students,
        class_list: s.class_list,
        attendance_threshold: s.attendance_threshold,
        attendance: s.attendance,
        seating_layout: s.seating_layout._id,
        seating_arrangement: s.seating_arrangement,
        always_mandatory: s.always_mandatory
    });
    return addStringID(newSection);
}
async function deleteSection(sectionID) {
    return await Section.findByIdAndDelete(sectionID).exec();
}
async function deleteArchivedSection(sectionID) {
    return await ArchivedSection.findByIdAndDelete(sectionID).exec();
}
async function getSection(sectionID) {
    return await Section.findById(sectionID).exec();
}
async function getArchivedSection(sectionID) {
    return await ArchivedSection.findById(sectionID).exec();
}

// Creates default data that can be re-used between non-destructive tests
// (non-destructive means that you don't modify this data so other tests can use it as well)
// (if you are modifying it create your own data or create it for each test)
async function createTestData() {
    const professor = await createUser(true);
    const student = await createUser(false);
    const layout = await createSeatingLayout();
    const section = await createSection({
        professor: professor, 
        seating_layout: layout
    });
    return {
        professor,
        student,
        layout,
        section
    }
}

// Helper function to delete data created by createTestData()
async function deleteTestData(testData) {
    await deleteSection(testData.section._id);
    await deleteSeatingLayout(testData.layout._id);
    await deleteUser(testData.professor._id);
    await deleteUser(testData.student._id);
}

// Helper function that deletes all test data from database
// (DO NOT USE IN AUTOMATED TESTS)
async function clearAllTestData() {
    await User.deleteMany({name: /^\*test_/}).exec();
    await Section.deleteMany({name: /^\*test_/}).exec();
    await SeatingLayout.deleteMany({name: /^\*test_/}).exec();
    await ArchivedSection.deleteMany({name: /^\*test_/}).exec();
}


module.exports = {
    uniqueID,
    login,
    logout,
    createUser,
    deleteUser,
    createSection,
    deleteSection,
    deleteArchivedSection,
    getSection,
    getArchivedSection,
    createSeatingLayout,
    deleteSeatingLayout,
    createTestData,
    deleteTestData,
    clearAllTestData
};